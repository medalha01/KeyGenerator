cmake_minimum_required(VERSION 3.10)
project(RNG_Benchmark CXX)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# --- Find Boost ---
# Find the Boost library, requiring the multiprecision component.
# If Boost is installed in a non-standard location, you might need to set BOOST_ROOT
# e.g., cmake .. -DBOOST_ROOT=/path/to/boost
find_package(Boost REQUIRED COMPONENTS multiprecision)
message(STATUS "Boost include dirs: ${Boost_INCLUDE_DIRS}")
message(STATUS "Boost library dirs: ${Boost_LIBRARY_DIRS}")
message(STATUS "Boost libraries: ${Boost_LIBRARIES}")

# Define source files
set(SOURCE_FILES
    src/main.cpp
    src/pseudo_rng/mersenne_twister.cpp
    # src/pseudo_rng/blum_blum_shub.cpp # Still not needed as implementation is in header
    # Add primality test implementations if they exist in .cpp files
    # src/primality_tests.cpp # Example if you have implementations
)

# Add the executable
add_executable(rng_benchmark ${SOURCE_FILES})

# Specify include directories
target_include_directories(rng_benchmark PRIVATE
    ${CMAKE_SOURCE_DIR}/src
    ${CMAKE_SOURCE_DIR}/src/pseudo_rng
    ${Boost_INCLUDE_DIRS} # Add Boost include directory
)

# Link necessary libraries
target_link_libraries(rng_benchmark PRIVATE
    ${Boost_LIBRARIES} # Link Boost libraries (might be empty if header-only)
)

# Optional: If Boost Multiprecision uses GMP/MPFR backends and they aren't found
# automatically, you might need to find and link them explicitly.
# find_package(GMPXX)
# find_package(MPFR)
# if(GMPXX_FOUND)
#   target_link_libraries(rng_benchmark PRIVATE GMPXX::gmpxx)
# endif()
# if(MPFR_FOUND)
#   target_link_libraries(rng_benchmark PRIVATE MPFR::mpfr)
# endif()
